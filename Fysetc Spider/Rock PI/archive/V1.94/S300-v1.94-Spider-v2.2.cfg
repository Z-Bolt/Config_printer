########################################
# Board Fysetc Spider V2.2 config
########################################
# S/N: 
########################################
# STEPPER configuration
########################################

[stepper_x]
step_pin: PE11
dir_pin: PE10
enable_pin: !PE9
rotation_distance: 40
microsteps: 16
endstop_pin: PB14
position_min: 0
position_endstop: 0
position_max: 300
homing_speed: 90
homing_retract_speed: 60
second_homing_speed: 30

[stepper_y]
step_pin: PD8
dir_pin: PB12
enable_pin: !PD9
rotation_distance: 40
microsteps: 16
endstop_pin: PB13
position_min: 0
position_endstop: 0
position_max: 300
homing_speed: 90
homing_retract_speed: 60
second_homing_speed: 30

[stepper_z]
step_pin: PD14
dir_pin: !PD13
enable_pin: !PD15
microsteps: 16
rotation_distance: 8
position_min: -2
endstop_pin: probe:z_virtual_endstop
position_max: 350
homing_speed: 15
homing_retract_speed: 3
second_homing_speed: 3
homing_retract_dist: 5

[stepper_z1]
step_pin: PE6
dir_pin: !PC13
enable_pin: !PE5
microsteps: 16
rotation_distance: 8

[safe_z_home]
home_xy_position: 150,150
speed: 90
z_hop:3
z_hop_speed: 15
move_to_previous: True

[gcode_macro Z_MAX]
gcode:
  G90
  {% set z_max = printer.toolhead.axis_maximum.z|float -1 %}
  G1 Z{z_max} F900

########################################
# HEATERS configuration
########################################

[extruder]
step_pin: PD5
dir_pin: !PD6
enable_pin: !PD4
microsteps: 16
rotation_distance: 4.56
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB15
sensor_type: PT1000
sensor_pin: PC0
control = pid
pid_kp = 15.813
pid_ki = 0.609
pid_kd = 102.585
min_temp: 0
max_temp: 350
max_extrude_cross_section: 100
max_extrude_only_distance: 1000
pressure_advance: 0.03

[heater_bed]
heater_pin: PB4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PB0
control = pid
pid_kp = 66.402
pid_ki = 2.380
pid_kd = 463.152
min_temp: 0
max_temp: 145

[temperature_sensor Камера]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: 5
max_temp: 100

########################################
# POWER configuration
########################################

[output_pin POWER_OFF]
pin: PA1 #X+
pwm: false
value: 0

[gcode_macro M81]
description: Power off macro.
gcode:
  SET_PIN PIN=POWER_OFF VALUE=1

########################################
# LED Control
########################################

[output_pin _light1]
pin: PB7 # RGB -B
pwm: false
value: 1

[output_pin _light2]
pin: PB6 # RGB -R
pwm: false
value: 0

[gcode_macro light_switch]
gcode:
  {% set light_state = printer['output_pin _light1'].value|float %}
  {% if light_state == 1 %}
  SET_PIN PIN=_light1 VALUE=0
  SET_PIN PIN=_light2 VALUE=1  
  {% endif %}
  {% if light_state == 0 %}
  SET_PIN PIN=_light1 VALUE=1
  SET_PIN PIN=_light2 VALUE=0  
  {% endif %}  

########################################
# BED LEVEL configuration
########################################

[probe]
pin: PA0
x_offset: 0.0
y_offset: 0.0
z_offset: -0.20
speed: 0.8
lift_speed: 25
samples: 1
sample_retract_dist: 2.0
samples_result: average
samples_tolerance: 0.04
samples_tolerance_retries: 0

[bed_mesh]
speed: 180
horizontal_move_z: 2
mesh_min:
    15,15
mesh_max:
    285,285
probe_count: 4,4

[gcode_macro G29]
description: Bed mesh.
gcode:
  {% if "xy" not in printer.toolhead.homed_axes %}
  G28 X Y
  {% endif %}
  {% if "z" not in printer.toolhead.homed_axes %}
  G28 Z
  {% endif %}
  BED_MESH_CALIBRATE

[z_tilt]
z_positions:
    -50,150
    350,150
points:
     10,150
     290,150
speed: 200
horizontal_move_z: 2
retries: 5
retry_tolerance: 0.04

[gcode_macro G34]
description: Z tilt.
gcode:
  {% if "xy" not in printer.toolhead.homed_axes %}
  G28 X Y
  {% endif %}
  {% if "z" not in printer.toolhead.homed_axes %}
  G28 Z
  {% endif %}
  Z_TILT_ADJUST

########################################
# FANS configuration
########################################

[fan]
pin: PA14 # FAN1

[heater_fan _front_fan]
pin: PA13 # FAN0
heater: extruder
heater_temp: 60.0
fan_speed: 1.0

[output_pin _fan_board]
pin: PB2  # FAN2
pwm: false
value: 1

[fan_generic Chamber_fan]
pin: PB5 # RGB -G

########################################
# FILAMENT SENSOR configuration
########################################

#[filament_switch_sensor Z-Bolt_Filament_Sensor_V1.0]
#pause_on_runout: True
#runout_gcode:
#   G92 E0
#   G1 E20 F150
#   G1 E-45 F300 
#   PAUSE
#insert_gcode:
#event_delay: 15.0
#switch_pin: PA1 #X+

########################################
# PRINTER MCU configuration
########################################

[mcu]
serial: /dev/serial/by-id/ #ls /dev/serial/by-id

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 2500
max_z_velocity: 20
max_z_accel: 20
square_corner_velocity: 15

[idle_timeout] 
timeout: 43200

########################################
# INPUT SHAPER configuration
########################################

[input_shaper]
shaper_freq_x: 49
shaper_type_x: mzv
shaper_freq_y: 49
shaper_type_y: mzv

[mcu rpi]
serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#      150,100,10

########################################
# TMC UART configuration
########################################

[tmc2209 stepper_x]
uart_pin: PE7
run_current: 0.900
hold_current: 0.600
stealthchop_threshold: 0

[tmc2209 stepper_y]
uart_pin: PE15
run_current: 0.900
hold_current: 0.600
stealthchop_threshold: 0

[tmc2209 stepper_z]
uart_pin: PD10
run_current: 0.900
hold_current: 0.600
stealthchop_threshold: 0

[tmc2209 extruder]
uart_pin: PD7
run_current: 0.700 # Low current LDO motor
hold_current: 0.500 # Low current LDO motor
stealthchop_threshold: 0

[tmc2209 stepper_z1]
uart_pin: PC14
run_current: 0.900
hold_current: 0.600
stealthchop_threshold: 0

########################################
# FLUIDD configuration
########################################

[include service_macros.cfg]

[include client_macros.cfg]

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause print.
rename_existing: BASE_PAUSE
variable_extrude: 1.0
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X10 Y10 F6000

[gcode_macro RESUME]
description: Resume print.
rename_existing: BASE_RESUME
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME
  
[gcode_macro CANCEL_PRINT]
description: Cancel print.
rename_existing: BASE_CANCEL_PRINT
gcode:
  Z_MAX
  G28 X Y
  RESTART

[gcode_macro LOAD_FILAMENT]
description: A macro that performs the function of loading a filament.
gcode:
  SAVE_GCODE_STATE NAME=load
  {% set cur_temp = printer[printer.toolhead.extruder].temperature|float %}
  {% set target_temp = printer[printer.toolhead.extruder].target|float %}
  {% if cur_temp < target_temp %}
      {% set wait_temp = target_temp %}
  {% else %}
      {% set wait_temp = cur_temp %}
  {% endif %}
  {% if wait_temp < 210 %}
      {% set wait_temp = 210 %}
  {% else %}
  {% endif %}
  M104 S{wait_temp}
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={wait_temp}
  M82
  G92 E0
  G1 E20 F600
  G1 E100 F1000
  G1 E110 F300
  G1 E120 F150
  G92 E0
  RESTORE_GCODE_STATE NAME=load

[gcode_macro UNLOAD_FILAMENT]
description: A macro that performs the function of unloading a filament.
gcode:
  SAVE_GCODE_STATE NAME=unload
  {% set cur_temp = printer[printer.toolhead.extruder].temperature|float %}
  {% set target_temp = printer[printer.toolhead.extruder].target|float %}
  {% if cur_temp < target_temp %}
      {% set wait_temp = target_temp %}
  {% else %}
      {% set wait_temp = cur_temp %}
  {% endif %}
  {% if wait_temp < 210 %}
      {% set wait_temp = 210 %}
  {% else %}
  {% endif %}
  M104 S{wait_temp}
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={wait_temp}
  M82
  G92 E0
  G1 E10 F200
  G1 E-10 F1000
  G1 E-30 F200
  G1 E-150 F1000
  G92 E0  
  RESTORE_GCODE_STATE NAME=unload

[gcode_macro BED_MESH_CALIBRATE]
# print surface bed mesh calibrate
# Works with Klicky Probe on Voron
# November 24, 2021
# Steve Turgeon
# Junuary 31, 2022
# Uladzimir Palekh
rename_existing: _BED_MESH_CALIBRATE

variable_buffer: 20

; Do not change any of the existing values below.
variable_last_area_start_x: -1 ; Do not change
variable_last_area_start_y: -1 ; Do not change
variable_last_area_end_x: -1 ; Do not change
variable_last_area_end_y: -1 ; Do not change

gcode:
  {% if params.FORCE_NEW_MESH != null %}
    { action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
  {% endif %}
  {% if printer["bed_mesh"].profile_name == '' %}
    { action_respond_info("No existing bed mesh found.") }
    {% set last_area_end_x=-1 %}
  {% endif %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

  {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
  {% if params.PRINT_MIN %}
    { action_respond_info("print_min: %s" % params.PRINT_MIN) }
    { action_respond_info("print_max: %s" % params.PRINT_MAX) }

    {% set blTouchConfig = printer['configfile'].config["bltouch"] %}
    {% if blTouchConfig %}
      {% set OffsetX = blTouchConfig.x_offset|default(0)|float %}
      {% set OffsetY = blTouchConfig.y_offset|default(0)|float %}
    {% endif %}

    {% set probeConfig = printer['configfile'].config["probe"] %}
    {% if probeConfig %}
      {% set OffsetX = probeConfig.x_offset|default(0)|float %}
      {% set OffsetY = probeConfig.y_offset|default(0)|float %}
    {% endif %}

    {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
    {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
    {% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
    {% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}

    {% if last_area_start_x > 0 %}
      { action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }
    {% endif %}

    {% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}
      {% if klicky_available %}
        _CheckProbe action=query
        Attach_Probe
      {% endif %}
      {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

        # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
        {% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %}
        {% set minimum_probe_count = 3 %}
        {% if bedMeshConfig.algorithm == "bicubic" %}
          {% set minimum_probe_count = 5 %}
        {% endif %}
        {% set probe_count = bedMeshConfig.probe_count.split(",") %}
        {% set probe_count_x = probe_count[0]|int %}
        {% if probe_count.__len__() > 1 %}
          {% set probe_count_y = probe_count[1]|int %}
        {% else %}
          {% set probe_count_y = probe_count_x|int %}
        {% endif %}
        {% set relative_reference_index = bedMeshConfig.relative_reference_index %}
        {% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
        {% set probe_distance_x = (mesh_max_x - mesh_min_x) / (probe_count_x - 1) %}
        {% set probe_distance_y = (mesh_max_y - mesh_min_y) / (probe_count_y - 1) %}

        {% if print_min_x - buffer >= mesh_min_x %}
          {% set mesh_min_x = print_min_x - buffer %}
        {% endif %}

        {% if print_min_y - buffer >= mesh_min_y %}
          {% set mesh_min_y = print_min_y - buffer %}
        {% endif %}

        {% if print_max_x + buffer <= mesh_max_x %}
          {% set mesh_max_x = print_max_x + buffer %}
        {% endif %}

        {% if print_max_y + buffer <= mesh_max_y %}
          {% set mesh_max_y = print_max_y + buffer %}
        {% endif %}

        {% set probe_count_x = ((mesh_max_x - mesh_min_x) / probe_distance_x)|round(0, 'ceil')|int %}
        {% set probe_count_y = ((mesh_max_y - mesh_min_y) / probe_distance_y)|round(0, 'ceil')|int %}

        {% if probe_count_x < minimum_probe_count %}
          {% set probe_count_x = minimum_probe_count %}
        {% endif %}

        {% if probe_count_y < minimum_probe_count %}
          {% set probe_count_y = minimum_probe_count %}
        {% endif %}

        { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
        { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
        { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

        ; Set variables so they're available outside of macro
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}

        {% if printer["gcode_macro status_meshing"] != null %}
          status_meshing
        {% endif %}

        {% if relative_reference_index == 0 or relative_reference_index == null %}
          _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
        {% else %}
          {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
          { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
          _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
        {% endif %}
      {% else %}
        {% if printer["gcode_macro status_meshing"] != null %}
          status_meshing
        {% endif %}
        _BED_MESH_CALIBRATE
      {% endif %}
      {% if klicky_available %}
        Dock_Probe
      {% endif %}
    {% else %}
      { action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
    {% endif %}
  {% else %}
    {% if klicky_available %}
      _CheckProbe action=query
      Attach_Probe
    {% endif %}
    {% if printer["gcode_macro status_meshing"] != null %}
      status_meshing
    {% endif %}
    _BED_MESH_CALIBRATE
    {% if klicky_available %}
      Dock_Probe
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}