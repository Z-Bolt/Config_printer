########################################
# BED LEVEL configuration
########################################
[probe]
pin: PA0
x_offset: 0.0
y_offset: 0.0
z_offset: -0.2
#z_offset: -0.16 # ABS
#z_offset: -0.12 # PETG
#z_offset: -0.08 # PLA
speed: 0.8
lift_speed: 25
samples: 1
sample_retract_dist: 2.0
samples_result: average
samples_tolerance: 0.04
samples_tolerance_retries: 0

[bed_mesh]
speed: 180
horizontal_move_z: 2
mesh_min:
    10,0
mesh_max:
    410,400
probe_count: 6,6

[gcode_macro G29]
description: Bed mesh.
gcode:
  {% if "xy" not in printer.toolhead.homed_axes %}
  G28 X Y
  {% endif %}
  {% if "z" not in printer.toolhead.homed_axes %}
  G28 Z
  {% endif %}
  BED_MESH_CALIBRATE


[safe_z_home]
home_xy_position: 210,200
speed: 90
z_hop:3
z_hop_speed: 15
move_to_previous: True

[gcode_macro GZ0]
gcode:
  M118 set Z0 value as {printer.probe.last_z_result|round(3)}
  SAVE_VARIABLE VARIABLE=z0 VALUE={printer.probe.last_z_result|round(3)} #записываем координату Z в переменную z0

[gcode_macro GZ1]
gcode:
  M118 set Z1 value as {printer.probe.last_z_result|round(3)}
  SAVE_VARIABLE VARIABLE=z1 VALUE={printer.probe.last_z_result|round(3)} #записываем координату Z в переменную z0
  
[gcode_macro GZ2]
gcode:
  M118 set Z2 value as {printer.probe.last_z_result|round(3)}
  SAVE_VARIABLE VARIABLE=z2 VALUE={printer.probe.last_z_result|round(3)} #записываем координату Z в переменную z0

[gcode_macro GZ3]
gcode:
  M118 set Z3 value as {printer.probe.last_z_result|round(3)}
  SAVE_VARIABLE VARIABLE=z3 VALUE={printer.probe.last_z_result|round(3)} #записываем координату Z в переменную z0

[gcode_macro z_info]
description: bed tilt info 
gcode:
  {% set svv = printer.save_variables.variables %}
  M118 current Z posotion is {printer.gcode_move.gcode_position.z}
  M118 Z0 value is {svv.z0}
  M118 Z1 value is {svv.z1}
  M118 Z2 value is {svv.z2}
  M118 Z3 value is {svv.z3}

[gcode_macro quad_z_tilt_adjust]
gcode:
  {% set svv = printer.save_variables.variables %}
  M118 z tilt adjustment process is in progress ...
  M118 turn Z0 screw {svv.z0}mm
  FORCE_MOVE STEPPER=stepper_z DISTANCE={svv.z0} VELOCITY=1 ACCEL=5
  G4 P2000
  M400
  #SAVE_VARIABLE VARIABLE=z0 VALUE=0
  M118 turn Z1 screw {svv.z1}mm
  FORCE_MOVE STEPPER=stepper_z1 DISTANCE={svv.z1} VELOCITY=1 ACCEL=5
  G4 P2000
  M400
  #SAVE_VARIABLE VARIABLE=z1 VALUE=0
  M118 turn Z2 screw {svv.z2}mm
  FORCE_MOVE STEPPER=stepper_z2 DISTANCE={svv.z2} VELOCITY=1 ACCEL=5
  G4 P2000
  M400
  #SAVE_VARIABLE VARIABLE=z2 VALUE=0
  M118 turn Z3 screw {svv.z3}mm
  FORCE_MOVE STEPPER=stepper_z3 DISTANCE={svv.z3} VELOCITY=1 ACCEL=5
  G4 P2000
  M400
  #SAVE_VARIABLE VARIABLE=z3 VALUE=0
  M118 z tilt adjustment process is done!  

[gcode_macro G34]
description: Z tilt.
gcode:
  {% if "xy" not in printer.toolhead.homed_axes %}
  G28 X Y
  {% endif %}
  {% if "z" not in printer.toolhead.homed_axes %}
  G28 Z
  {% endif %}
    G1 Z3 F1200
    G1 X10 Y0 F12000
    PROBE
    GZ0 ; macros - save probe result to Z0 variable

    G1 Z3 F1200
    G1 X10 Y400 F12000
    PROBE
    GZ1 ; macros - save probe result to Z1 variable

    G1 Z3 F1200
    G1 X410 Y400 F12000
    PROBE
    GZ2 ; macros - save probe result to Z2 variable

    G1 Z3 F1200
    G1 X410 Y0 F12000
    PROBE
    GZ3 ; macros - save probe result to Z3 variable

    z_info

    G1 Z3 F1200
    G1 X200 Y200 F12000

    ;выравниваем плоскоть стола ...
    quad_z_tilt_adjust


[gcode_macro BED_MESH_CALIBRATE]
# print surface bed mesh calibrate
# Works with Klicky Probe on Voron
# November 24, 2021
# Steve Turgeon
# Junuary 31, 2022
# Uladzimir Palekh
rename_existing: _BED_MESH_CALIBRATE

variable_buffer: 20

; Do not change any of the existing values below.
variable_last_area_start_x: -1 ; Do not change
variable_last_area_start_y: -1 ; Do not change
variable_last_area_end_x: -1 ; Do not change
variable_last_area_end_y: -1 ; Do not change

gcode:
  {% if params.FORCE_NEW_MESH != null %}
    { action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
  {% endif %}
  {% if printer["bed_mesh"].profile_name == '' %}
    { action_respond_info("No existing bed mesh found.") }
    {% set last_area_end_x=-1 %}
  {% endif %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

  {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
  {% if params.PRINT_MIN %}
    { action_respond_info("print_min: %s" % params.PRINT_MIN) }
    { action_respond_info("print_max: %s" % params.PRINT_MAX) }

    {% set blTouchConfig = printer['configfile'].config["bltouch"] %}
    {% if blTouchConfig %}
      {% set OffsetX = blTouchConfig.x_offset|default(0)|float %}
      {% set OffsetY = blTouchConfig.y_offset|default(0)|float %}
    {% endif %}

    {% set probeConfig = printer['configfile'].config["probe"] %}
    {% if probeConfig %}
      {% set OffsetX = probeConfig.x_offset|default(0)|float %}
      {% set OffsetY = probeConfig.y_offset|default(0)|float %}
    {% endif %}

    {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
    {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
    {% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
    {% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}

    {% if last_area_start_x > 0 %}
      { action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }
    {% endif %}

    {% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}
      {% if klicky_available %}
        _CheckProbe action=query
        Attach_Probe
      {% endif %}
      {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

        # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
        {% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %}
        {% set minimum_probe_count = 3 %}
        {% if bedMeshConfig.algorithm == "bicubic" %}
          {% set minimum_probe_count = 5 %}
        {% endif %}
        {% set probe_count = bedMeshConfig.probe_count.split(",") %}
        {% set probe_count_x = probe_count[0]|int %}
        {% if probe_count.__len__() > 1 %}
          {% set probe_count_y = probe_count[1]|int %}
        {% else %}
          {% set probe_count_y = probe_count_x|int %}
        {% endif %}
        {% set relative_reference_index = bedMeshConfig.relative_reference_index %}
        {% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
        {% set probe_distance_x = (mesh_max_x - mesh_min_x) / (probe_count_x - 1) %}
        {% set probe_distance_y = (mesh_max_y - mesh_min_y) / (probe_count_y - 1) %}

        {% if print_min_x - buffer >= mesh_min_x %}
          {% set mesh_min_x = print_min_x - buffer %}
        {% endif %}

        {% if print_min_y - buffer >= mesh_min_y %}
          {% set mesh_min_y = print_min_y - buffer %}
        {% endif %}

        {% if print_max_x + buffer <= mesh_max_x %}
          {% set mesh_max_x = print_max_x + buffer %}
        {% endif %}

        {% if print_max_y + buffer <= mesh_max_y %}
          {% set mesh_max_y = print_max_y + buffer %}
        {% endif %}

        {% set probe_count_x = ((mesh_max_x - mesh_min_x) / probe_distance_x)|round(0, 'ceil')|int %}
        {% set probe_count_y = ((mesh_max_y - mesh_min_y) / probe_distance_y)|round(0, 'ceil')|int %}

        {% if probe_count_x < minimum_probe_count %}
          {% set probe_count_x = minimum_probe_count %}
        {% endif %}

        {% if probe_count_y < minimum_probe_count %}
          {% set probe_count_y = minimum_probe_count %}
        {% endif %}

        { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
        { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
        { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

        ; Set variables so they're available outside of macro
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}

        {% if printer["gcode_macro status_meshing"] != null %}
          status_meshing
        {% endif %}

        {% if relative_reference_index == 0 or relative_reference_index == null %}
          _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
        {% else %}
          {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
          { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
          _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
        {% endif %}
      {% else %}
        {% if printer["gcode_macro status_meshing"] != null %}
          status_meshing
        {% endif %}
        _BED_MESH_CALIBRATE
      {% endif %}
      {% if klicky_available %}
        Dock_Probe
      {% endif %}
    {% else %}
      { action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
    {% endif %}
  {% else %}
    {% if klicky_available %}
      _CheckProbe action=query
      Attach_Probe
    {% endif %}
    {% if printer["gcode_macro status_meshing"] != null %}
      status_meshing
    {% endif %}
    _BED_MESH_CALIBRATE
    {% if klicky_available %}
      Dock_Probe
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}