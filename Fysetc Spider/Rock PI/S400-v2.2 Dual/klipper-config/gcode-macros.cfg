[gcode_macro START_PRINT]
gcode:
  {% set T_BED = params.T_BED | default(90) | float %}
  {% set T_EXTRUDER = params.T_EXTRUDER | default(230) | float %}
  {% set T_CHAMBER = params.T_CHAMBER | default(0) | float %}
  {% set TOOL_NR = params.TOOL_NR | default(0) | int %}
  G21 ;metric values
  G90 ;absolute positioning
  M82 ;set extruder to absolute mode
  M107 ;start with the fan off
  T0
  START_CHECK0
  FILAMENT_CHECK1
  M140 S{T_BED}
  M104 S160
  SET_HEATER_TEMPERATURE HEATER=chamber TARGET={T_CHAMBER}
  PARK_EXTRUDER ;park tool0
  M190 S{T_BED}
  M109 S160
  G4 P60000 ;pause
  GET_EXTRUDER ;get tool0
  G1 Z3 F900
  BED_ALIGNMENT ;bed tilt adjustment
  BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} ;auto bed level
  G1 Z3 F1200 ;move the platform up 3mm
  M104 S0 ;turn off tool0 heater
  T{TOOL_NR} ;take printing tool
  PARK_EXTRUDER{TOOL_NR}
  M104 S{T_EXTRUDER}
  M109 S{T_EXTRUDER}
  GET_EXTRUDER{TOOL_NR}
  INTRO_LINE

[gcode_macro END_PRINT]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set T_CHAMBER = params.T_CHAMBER | default(0) | float %}
  {% set T_BED = params.T_BED | default(100) | float %}
  {% set COOLDOWN_TIME = params.COOLDOWN_TIME | default(120) | float *60000 %}
  {% set SHUTDOWN_TEMP = params.SHUTDOWN_TEMP | default(60) | float %}
  SAVE_VARIABLE VARIABLE=target_chamb VALUE={T_CHAMBER}
  SAVE_VARIABLE VARIABLE=target_bed VALUE={T_BED} 
  SAVE_VARIABLE VARIABLE=cooldown_time VALUE={COOLDOWN_TIME}

  G91 ;relative positioning
  G1 E-2 F2000 ;start retract
  G1 Z+3 E-6 F5000 ;continue retract
  G90 ;absolute positioning
  T0
  G1 X{svv.t0x_park} Y{svv.t0y_park} F{svv.speed_fast}
  TURN_OFF_HEATERS
  FILAMENT_CHECK0
  M82
  COOLDOWN
  Z_MAX
  M106 S255
  SET_FAN_SPEED FAN=Chamber_fan SPEED=1
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={SHUTDOWN_TEMP}
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={SHUTDOWN_TEMP}
  M81 ;power off

[gcode_macro COOLDOWN]
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set TARGET_CHAMB = svv.target_chamb %}                                     # начальная целевая температура камеры при отпуске из переменной target_chamb
  {% set TARGET_BED = svv.target_bed %}                                         # целевая температура стола при отпуске из переменной target_bed
  {% set COOLDOWN_TIME = svv.cooldown_time *60000 %}                            # целевое время отпуска из переменной cooldown_time (в минутах)
  {% set CUR_TEMP = printer['heater_generic chamber'].temperature | float %}    # текущая температура камеры
  {% set N = ((TARGET_CHAMB - 30)/10) | round(0) | int %}                       # расчетное количество итераций отпуска с опусканием температуры на 10 градусов за одну итерацию  
  {% set DELTA_TIME = (COOLDOWN_TIME / N) | int %}                              # расчетное время одной итерации в микросекундах                                 
  {% set DISPLAYED_TIME = (DELTA_TIME / 60000) | round(1) %}                    # отображаемое расчетное время одной итерации в минутах
  {% set ALL_DISPLAYED_TIME = (DISPLAYED_TIME * N) | round(1) %}                # отображаемое расчетное общее время отпуска в минутах
  SAVE_VARIABLE VARIABLE=tchamb_temp VALUE={TARGET_CHAMB}                       # записываем в переменную tchamb_temp начальную целевую температуру камеры при отпуске
  SAVE_VARIABLE VARIABLE=delta_time VALUE={DELTA_TIME}                          # записываем в переменную delta_time расчетное время одной итерации в микросекундах

  {% if TARGET_CHAMB != 0 %}                                                    # Если целевая температура отпуска задана начинаем отпуск 
    M118 Начинаем отпуск детали!
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={TARGET_BED}                # включаем нагрев стола до целевой температуры 
    M118 Общее время ожидания {ALL_DISPLAYED_TIME} минут.
    {% for i in range(10, 0, -1) %}                                             # запускаем цикл из 10 шагов 
      _SET_CHTEMP                                                               # задаем целевую температуру камеры через макрос _SET_CHTEMP
      M118 время ожидания итерации {DISPLAYED_TIME} минут.
      _WAIT_CHTEMP T_CHAMBER={T_CHAMBER} COOLDOWN_TIME={COOLDOWN_TIME}          # задаем задержку ожидания одной итерации с проверкой текущей температуры камеры
    {% endfor %}
    M118 Отпуск детали завершён!!!
    SET_HEATER_TEMPERATURE HEATER=chamber TARGET=0                              # Выключаем нагрев камеры по окончании отпуска
  {% endif %}

[gcode_macro _SET_CHTEMP]                                                       # МАКРОС УСТАНОВКИ ЦЕЛЕВОЙ ТЕМПЕРАТУРЫ КАМЕРЫ
gcode:
  {% set svv = printer.save_variables.variables %}
  SET_HEATER_TEMPERATURE HEATER=chamber TARGET={svv.tchamb_temp}                # задаем целевую температуру камеры из переменной tchamb_temp
  M118 Температура отпуска = {svv.tchamb_temp} градусов.                        # отображаем целевую температуру камеры

[gcode_macro _WAIT_CHTEMP]                                                      # МАКРОС УСТАНОВКИ ВРЕМЕНИ ЗАДЕРЖКИ ОДНОЙ ИТЕРАЦИИ С ПРОВЕРКОЙ ТЕМПЕРАТУРЫ КАМЕРЫ
gcode:
  {% set svv = printer.save_variables.variables %}                              
  {% set DELTA_TIME = svv.delta_time %}                                         # расчетное время одной итерации в микросекундах из переменной delta_time
  {% set CUR_TEMP = printer['heater_generic chamber'].temperature|float %}      # текущая температура камеры
  
  {% if CUR_TEMP > 35 %}                                                        # если текущая температура камеры больше 35 градусов 
    G4 P{DELTA_TIME}                                                            # задаем задержку ожидания для одной итерации
    _CHECK_CHTEMP                                                               # макрос проверки соответствия температуры камеры целевой по окончании итерации отпуска
    {% else %}
    M118 температура камеры ниже 35 градусов, дальше отпускать смысла нету, пропускаем итерацию)))
  {% endif %} 

[gcode_macro _CHECK_CHTEMP]                                                     # МАКРОС ПРОВЕРКИ ТЕМПЕРАТУРЫ. ЕСЛИ ПО ОКОНЧАНИИ ИТЕРАЦИИ ОТПУСКА ТЕМПЕРАТУРА КАМЕРЫ ОПУСТИЛАСЬ ДО ЦЕЛЕВОЙ, ПРОДОЛЖАЕМ ДАЛЬШЕ.  
gcode:                                                                          # ЕСЛИ НЕТ - ОПУСКАЕМ ТЕМПЕРАТУРУ СТОЛА НА 10 ГРАДУСОВ, ЖДЕМ 10 МИНУТ И ПЕРЕЗАПУСКАЕМ ИТЕРАЦИЮ С ТОЙ ЖЕ ТЕМПЕРАТУРОЙ КАМЕРЫ.
  {% set svv = printer.save_variables.variables %}
  {% set CUR_TEMP = printer['heater_generic chamber'].temperature|float %}      # текущая температура камеры
  {% set TARGET_CHAMB = printer['heater_generic chamber'].target|float %}       # целевая температура камеры
  {% set TARGET_BED = (printer.heater_bed.temperature - 10)|float %}            # целевая температура СТОЛА для случая превышения целевой температуры КАМЕРЫ ( текущая минус 10 градусов)

  M118 целевая температура камеры {TARGET_CHAMB}
  M118 текущая температура камеры {CUR_TEMP}

  {% if TARGET_CHAMB < (CUR_TEMP - 2) %}                                        # если текущая температура камеры на 2 градуса выше целевой
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={TARGET_BED}                # опускаем температуру стола на 10 градусов
    M118 температура камеры выше целевой, опускаем температуру стола на 10 градусов и повторяем итерацию
    SAVE_VARIABLE VARIABLE=tchamb_temp VALUE={printer['heater_generic chamber'].target|float}  # записываем в переменную tchamb_temp целевую температуру камеры ТАКУЮ ЖЕ, КАК В ПРЕДЫДУЩЕЙ ИТЕРАЦИИ
    G4 P600000                                                                  # ждем 10 МИНУТ
    {% else %}                                                                  # если текущая температура камеры соответствует целевой
    M118 температура камеры соответствует целевой, опускаем температуру камеры на 10 градусов и переходим к следующей итерации
    SAVE_VARIABLE VARIABLE=tchamb_temp VALUE={printer['heater_generic chamber'].target |float -10} # опускаем целевую температуру камеры на 10 градусов и записываем в переменную tchamb_temp
  {% endif %}

[gcode_macro INTRO_LINE]
gcode:
  {% set svv = printer.save_variables.variables %}
  G92 E0 ;zero the extruded length
  G1 X150 Y400 F18000
  G1 Z0.3 F2000
  G1 X200 E10 F1500
  G1 X250 E18 F1000
  G92 E0

[gcode_macro PAUSE]
description: Pause print.
rename_existing: BASE_PAUSE
variable_extrude: 6.0
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float -1 %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = max_z - act_z %}
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  #G91
  #G1 E-{E} F2100
  G90
  G1 X10 Y10 Z{max_z} F1500

[gcode_macro RESUME]
description: Resume print.
rename_existing: BASE_RESUME
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
description: Cancel print.
rename_existing: BASE_CANCEL_PRINT
gcode:
  G90
  G1 X10 Y290 F9000
  Z_MAX
  FILAMENT_CHECK0
  RESTART

[gcode_macro PID_CALIBRATE_HOTEND0]
description: Run PID calibration for hotend.
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=235

[gcode_macro PID_CALIBRATE_HOTEND1]
description: Run PID calibration for hotend.
gcode:
    PID_CALIBRATE HEATER=extruder1 TARGET=235

[gcode_macro PID_CALIBRATE_BED]
description: Run PID calibration for bed.
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=90
    SAVE_CONFIG 

[gcode_macro BED_ALIGNMENT]
gcode:
    G21 ;metric values
    G90 ;absolute positioning
    G28 X0 Y0 Z0 ;Home all

    ; 1 итерация

    G1 Z3 F1200
    G1 X10 Y0 F12000
    PROBE
    GZ0 ; macros - save probe result to Z0 variable

    G1 Z3 F1200
    G1 X10 Y350 F12000
    PROBE
    GZ1 ; macros - save probe result to Z1 variable

    G1 Z3 F1200
    G1 X410 Y350 F12000
    PROBE
    GZ2 ; macros - save probe result to Z2 variable

    G1 Z3 F1200
    G1 X410 Y0 F12000
    PROBE
    GZ3 ; macros - save probe result to Z3 variable

    z_info

    G1 Z3 F1200
    G1 X210 Y200 F12000

    ;выравниваем плоскоть стола ...
    quad_z_tilt_adjust

    ; 2 итерация

    G1 Z3 F1200
    G1 X10 Y0 F12000
    PROBE
    GZ0 ; macros - save probe result to Z0 variable

    G1 Z3 F1200
    G1 X10 Y350 F12000
    PROBE
    GZ1 ; macros - save probe result to Z1 variable

    G1 Z3 F1200
    G1 X410 Y350 F12000
    PROBE
    GZ2 ; macros - save probe result to Z2 variable

    G1 Z3 F1200
    G1 X410 Y0 F12000
    PROBE
    GZ3 ; macros - save probe result to Z3 variable

    z_info

    G1 Z3 F1200
    G1 X210 Y200 F12000

    ;выравниваем плоскоть стола ...
    quad_z_tilt_adjust

    ; 3 итерация

    G1 Z3 F1200
    G1 X10 Y0 F12000
    PROBE
    GZ0 ; macros - save probe result to Z0 variable

    G1 Z3 F1200
    G1 X10 Y350 F12000
    PROBE
    GZ1 ; macros - save probe result to Z1 variable

    G1 Z3 F1200
    G1 X410 Y350 F12000
    PROBE
    GZ2 ; macros - save probe result to Z2 variable

    G1 Z3 F1200
    G1 X410 Y0 F12000
    PROBE
    GZ3 ; macros - save probe result to Z3 variable

    z_info

    G1 Z3 F1200
    G1 X210 Y200 F12000

    ;выравниваем плоскоть стола ...
    quad_z_tilt_adjust

    G28 X0 Y0

